// Code generated by "enumer --json --type=ElementType -trimprefix=Element elementtype.go"; DO NOT EDIT.

package excel

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ElementTypeName = "NoneFireWaterGrassElectricIceFrozenWindRockAntiFireVehicleMuteIceMushroomOverdoseWood"

var _ElementTypeIndex = [...]uint8{0, 4, 8, 13, 18, 26, 29, 35, 39, 43, 51, 65, 73, 81, 85}

const _ElementTypeLowerName = "nonefirewatergrasselectricicefrozenwindrockantifirevehiclemuteicemushroomoverdosewood"

func (i ElementType) String() string {
	if i >= ElementType(len(_ElementTypeIndex)-1) {
		return fmt.Sprintf("ElementType(%d)", i)
	}
	return _ElementTypeName[_ElementTypeIndex[i]:_ElementTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ElementTypeNoOp() {
	var x [1]struct{}
	_ = x[ElementNone-(0)]
	_ = x[ElementFire-(1)]
	_ = x[ElementWater-(2)]
	_ = x[ElementGrass-(3)]
	_ = x[ElementElectric-(4)]
	_ = x[ElementIce-(5)]
	_ = x[ElementFrozen-(6)]
	_ = x[ElementWind-(7)]
	_ = x[ElementRock-(8)]
	_ = x[ElementAntiFire-(9)]
	_ = x[ElementVehicleMuteIce-(10)]
	_ = x[ElementMushroom-(11)]
	_ = x[ElementOverdose-(12)]
	_ = x[ElementWood-(13)]
}

var _ElementTypeValues = []ElementType{ElementNone, ElementFire, ElementWater, ElementGrass, ElementElectric, ElementIce, ElementFrozen, ElementWind, ElementRock, ElementAntiFire, ElementVehicleMuteIce, ElementMushroom, ElementOverdose, ElementWood}

var _ElementTypeNameToValueMap = map[string]ElementType{
	_ElementTypeName[0:4]:        ElementNone,
	_ElementTypeLowerName[0:4]:   ElementNone,
	_ElementTypeName[4:8]:        ElementFire,
	_ElementTypeLowerName[4:8]:   ElementFire,
	_ElementTypeName[8:13]:       ElementWater,
	_ElementTypeLowerName[8:13]:  ElementWater,
	_ElementTypeName[13:18]:      ElementGrass,
	_ElementTypeLowerName[13:18]: ElementGrass,
	_ElementTypeName[18:26]:      ElementElectric,
	_ElementTypeLowerName[18:26]: ElementElectric,
	_ElementTypeName[26:29]:      ElementIce,
	_ElementTypeLowerName[26:29]: ElementIce,
	_ElementTypeName[29:35]:      ElementFrozen,
	_ElementTypeLowerName[29:35]: ElementFrozen,
	_ElementTypeName[35:39]:      ElementWind,
	_ElementTypeLowerName[35:39]: ElementWind,
	_ElementTypeName[39:43]:      ElementRock,
	_ElementTypeLowerName[39:43]: ElementRock,
	_ElementTypeName[43:51]:      ElementAntiFire,
	_ElementTypeLowerName[43:51]: ElementAntiFire,
	_ElementTypeName[51:65]:      ElementVehicleMuteIce,
	_ElementTypeLowerName[51:65]: ElementVehicleMuteIce,
	_ElementTypeName[65:73]:      ElementMushroom,
	_ElementTypeLowerName[65:73]: ElementMushroom,
	_ElementTypeName[73:81]:      ElementOverdose,
	_ElementTypeLowerName[73:81]: ElementOverdose,
	_ElementTypeName[81:85]:      ElementWood,
	_ElementTypeLowerName[81:85]: ElementWood,
}

var _ElementTypeNames = []string{
	_ElementTypeName[0:4],
	_ElementTypeName[4:8],
	_ElementTypeName[8:13],
	_ElementTypeName[13:18],
	_ElementTypeName[18:26],
	_ElementTypeName[26:29],
	_ElementTypeName[29:35],
	_ElementTypeName[35:39],
	_ElementTypeName[39:43],
	_ElementTypeName[43:51],
	_ElementTypeName[51:65],
	_ElementTypeName[65:73],
	_ElementTypeName[73:81],
	_ElementTypeName[81:85],
}

// ElementTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ElementTypeString(s string) (ElementType, error) {
	if val, ok := _ElementTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ElementTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ElementType values", s)
}

// ElementTypeValues returns all values of the enum
func ElementTypeValues() []ElementType {
	return _ElementTypeValues
}

// ElementTypeStrings returns a slice of all String values of the enum
func ElementTypeStrings() []string {
	strs := make([]string, len(_ElementTypeNames))
	copy(strs, _ElementTypeNames)
	return strs
}

// IsAElementType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ElementType) IsAElementType() bool {
	for _, v := range _ElementTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ElementType
func (i ElementType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ElementType
func (i *ElementType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ElementType should be a string, got %s", data)
	}

	var err error
	*i, err = ElementTypeString(s)
	return err
}
