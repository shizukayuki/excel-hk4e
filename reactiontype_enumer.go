// Code generated by "enumer --json --type=ReactionType -trimprefix=Reaction reactiontype.go"; DO NOT EDIT.

package excel

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ReactionTypeName = "NoneExplodeStreamBurningBurnedWetOvergrowMeltFreezeAntiFireRockSlowDownShockWindElectricFireSuperconductorSwirlFireSwirlWaterSwirlElectricSwirlIceSwirlFireAccuSwirlWaterAccuSwirlElectricAccuSwirlIceAccuStickRockStickWaterCrystallizeFireCrystallizeWaterCrystallizeElectricCrystallizeIceFrozenBrokenStickGrassOverdoseOverdoseElectricOverdoseGrassOvergrowMushroomFireOvergrowMushroomElectric"

var _ReactionTypeIndex = [...]uint16{0, 4, 11, 17, 24, 30, 33, 41, 45, 51, 59, 63, 71, 76, 80, 88, 92, 106, 115, 125, 138, 146, 159, 173, 190, 202, 211, 221, 236, 252, 271, 285, 297, 307, 315, 331, 344, 364, 388}

const _ReactionTypeLowerName = "noneexplodestreamburningburnedwetovergrowmeltfreezeantifirerockslowdownshockwindelectricfiresuperconductorswirlfireswirlwaterswirlelectricswirliceswirlfireaccuswirlwateraccuswirlelectricaccuswirliceaccustickrockstickwatercrystallizefirecrystallizewatercrystallizeelectriccrystallizeicefrozenbrokenstickgrassoverdoseoverdoseelectricoverdosegrassovergrowmushroomfireovergrowmushroomelectric"

func (i ReactionType) String() string {
	if i >= ReactionType(len(_ReactionTypeIndex)-1) {
		return fmt.Sprintf("ReactionType(%d)", i)
	}
	return _ReactionTypeName[_ReactionTypeIndex[i]:_ReactionTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ReactionTypeNoOp() {
	var x [1]struct{}
	_ = x[ReactionNone-(0)]
	_ = x[ReactionExplode-(1)]
	_ = x[ReactionStream-(2)]
	_ = x[ReactionBurning-(3)]
	_ = x[ReactionBurned-(4)]
	_ = x[ReactionWet-(5)]
	_ = x[ReactionOvergrow-(6)]
	_ = x[ReactionMelt-(7)]
	_ = x[ReactionFreeze-(8)]
	_ = x[ReactionAntiFire-(9)]
	_ = x[ReactionRock-(10)]
	_ = x[ReactionSlowDown-(11)]
	_ = x[ReactionShock-(12)]
	_ = x[ReactionWind-(13)]
	_ = x[ReactionElectric-(14)]
	_ = x[ReactionFire-(15)]
	_ = x[ReactionSuperconductor-(16)]
	_ = x[ReactionSwirlFire-(17)]
	_ = x[ReactionSwirlWater-(18)]
	_ = x[ReactionSwirlElectric-(19)]
	_ = x[ReactionSwirlIce-(20)]
	_ = x[ReactionSwirlFireAccu-(21)]
	_ = x[ReactionSwirlWaterAccu-(22)]
	_ = x[ReactionSwirlElectricAccu-(23)]
	_ = x[ReactionSwirlIceAccu-(24)]
	_ = x[ReactionStickRock-(25)]
	_ = x[ReactionStickWater-(26)]
	_ = x[ReactionCrystallizeFire-(27)]
	_ = x[ReactionCrystallizeWater-(28)]
	_ = x[ReactionCrystallizeElectric-(29)]
	_ = x[ReactionCrystallizeIce-(30)]
	_ = x[ReactionFrozenBroken-(31)]
	_ = x[ReactionStickGrass-(32)]
	_ = x[ReactionOverdose-(33)]
	_ = x[ReactionOverdoseElectric-(34)]
	_ = x[ReactionOverdoseGrass-(35)]
	_ = x[ReactionOvergrowMushroomFire-(36)]
	_ = x[ReactionOvergrowMushroomElectric-(37)]
}

var _ReactionTypeValues = []ReactionType{ReactionNone, ReactionExplode, ReactionStream, ReactionBurning, ReactionBurned, ReactionWet, ReactionOvergrow, ReactionMelt, ReactionFreeze, ReactionAntiFire, ReactionRock, ReactionSlowDown, ReactionShock, ReactionWind, ReactionElectric, ReactionFire, ReactionSuperconductor, ReactionSwirlFire, ReactionSwirlWater, ReactionSwirlElectric, ReactionSwirlIce, ReactionSwirlFireAccu, ReactionSwirlWaterAccu, ReactionSwirlElectricAccu, ReactionSwirlIceAccu, ReactionStickRock, ReactionStickWater, ReactionCrystallizeFire, ReactionCrystallizeWater, ReactionCrystallizeElectric, ReactionCrystallizeIce, ReactionFrozenBroken, ReactionStickGrass, ReactionOverdose, ReactionOverdoseElectric, ReactionOverdoseGrass, ReactionOvergrowMushroomFire, ReactionOvergrowMushroomElectric}

var _ReactionTypeNameToValueMap = map[string]ReactionType{
	_ReactionTypeName[0:4]:          ReactionNone,
	_ReactionTypeLowerName[0:4]:     ReactionNone,
	_ReactionTypeName[4:11]:         ReactionExplode,
	_ReactionTypeLowerName[4:11]:    ReactionExplode,
	_ReactionTypeName[11:17]:        ReactionStream,
	_ReactionTypeLowerName[11:17]:   ReactionStream,
	_ReactionTypeName[17:24]:        ReactionBurning,
	_ReactionTypeLowerName[17:24]:   ReactionBurning,
	_ReactionTypeName[24:30]:        ReactionBurned,
	_ReactionTypeLowerName[24:30]:   ReactionBurned,
	_ReactionTypeName[30:33]:        ReactionWet,
	_ReactionTypeLowerName[30:33]:   ReactionWet,
	_ReactionTypeName[33:41]:        ReactionOvergrow,
	_ReactionTypeLowerName[33:41]:   ReactionOvergrow,
	_ReactionTypeName[41:45]:        ReactionMelt,
	_ReactionTypeLowerName[41:45]:   ReactionMelt,
	_ReactionTypeName[45:51]:        ReactionFreeze,
	_ReactionTypeLowerName[45:51]:   ReactionFreeze,
	_ReactionTypeName[51:59]:        ReactionAntiFire,
	_ReactionTypeLowerName[51:59]:   ReactionAntiFire,
	_ReactionTypeName[59:63]:        ReactionRock,
	_ReactionTypeLowerName[59:63]:   ReactionRock,
	_ReactionTypeName[63:71]:        ReactionSlowDown,
	_ReactionTypeLowerName[63:71]:   ReactionSlowDown,
	_ReactionTypeName[71:76]:        ReactionShock,
	_ReactionTypeLowerName[71:76]:   ReactionShock,
	_ReactionTypeName[76:80]:        ReactionWind,
	_ReactionTypeLowerName[76:80]:   ReactionWind,
	_ReactionTypeName[80:88]:        ReactionElectric,
	_ReactionTypeLowerName[80:88]:   ReactionElectric,
	_ReactionTypeName[88:92]:        ReactionFire,
	_ReactionTypeLowerName[88:92]:   ReactionFire,
	_ReactionTypeName[92:106]:       ReactionSuperconductor,
	_ReactionTypeLowerName[92:106]:  ReactionSuperconductor,
	_ReactionTypeName[106:115]:      ReactionSwirlFire,
	_ReactionTypeLowerName[106:115]: ReactionSwirlFire,
	_ReactionTypeName[115:125]:      ReactionSwirlWater,
	_ReactionTypeLowerName[115:125]: ReactionSwirlWater,
	_ReactionTypeName[125:138]:      ReactionSwirlElectric,
	_ReactionTypeLowerName[125:138]: ReactionSwirlElectric,
	_ReactionTypeName[138:146]:      ReactionSwirlIce,
	_ReactionTypeLowerName[138:146]: ReactionSwirlIce,
	_ReactionTypeName[146:159]:      ReactionSwirlFireAccu,
	_ReactionTypeLowerName[146:159]: ReactionSwirlFireAccu,
	_ReactionTypeName[159:173]:      ReactionSwirlWaterAccu,
	_ReactionTypeLowerName[159:173]: ReactionSwirlWaterAccu,
	_ReactionTypeName[173:190]:      ReactionSwirlElectricAccu,
	_ReactionTypeLowerName[173:190]: ReactionSwirlElectricAccu,
	_ReactionTypeName[190:202]:      ReactionSwirlIceAccu,
	_ReactionTypeLowerName[190:202]: ReactionSwirlIceAccu,
	_ReactionTypeName[202:211]:      ReactionStickRock,
	_ReactionTypeLowerName[202:211]: ReactionStickRock,
	_ReactionTypeName[211:221]:      ReactionStickWater,
	_ReactionTypeLowerName[211:221]: ReactionStickWater,
	_ReactionTypeName[221:236]:      ReactionCrystallizeFire,
	_ReactionTypeLowerName[221:236]: ReactionCrystallizeFire,
	_ReactionTypeName[236:252]:      ReactionCrystallizeWater,
	_ReactionTypeLowerName[236:252]: ReactionCrystallizeWater,
	_ReactionTypeName[252:271]:      ReactionCrystallizeElectric,
	_ReactionTypeLowerName[252:271]: ReactionCrystallizeElectric,
	_ReactionTypeName[271:285]:      ReactionCrystallizeIce,
	_ReactionTypeLowerName[271:285]: ReactionCrystallizeIce,
	_ReactionTypeName[285:297]:      ReactionFrozenBroken,
	_ReactionTypeLowerName[285:297]: ReactionFrozenBroken,
	_ReactionTypeName[297:307]:      ReactionStickGrass,
	_ReactionTypeLowerName[297:307]: ReactionStickGrass,
	_ReactionTypeName[307:315]:      ReactionOverdose,
	_ReactionTypeLowerName[307:315]: ReactionOverdose,
	_ReactionTypeName[315:331]:      ReactionOverdoseElectric,
	_ReactionTypeLowerName[315:331]: ReactionOverdoseElectric,
	_ReactionTypeName[331:344]:      ReactionOverdoseGrass,
	_ReactionTypeLowerName[331:344]: ReactionOverdoseGrass,
	_ReactionTypeName[344:364]:      ReactionOvergrowMushroomFire,
	_ReactionTypeLowerName[344:364]: ReactionOvergrowMushroomFire,
	_ReactionTypeName[364:388]:      ReactionOvergrowMushroomElectric,
	_ReactionTypeLowerName[364:388]: ReactionOvergrowMushroomElectric,
}

var _ReactionTypeNames = []string{
	_ReactionTypeName[0:4],
	_ReactionTypeName[4:11],
	_ReactionTypeName[11:17],
	_ReactionTypeName[17:24],
	_ReactionTypeName[24:30],
	_ReactionTypeName[30:33],
	_ReactionTypeName[33:41],
	_ReactionTypeName[41:45],
	_ReactionTypeName[45:51],
	_ReactionTypeName[51:59],
	_ReactionTypeName[59:63],
	_ReactionTypeName[63:71],
	_ReactionTypeName[71:76],
	_ReactionTypeName[76:80],
	_ReactionTypeName[80:88],
	_ReactionTypeName[88:92],
	_ReactionTypeName[92:106],
	_ReactionTypeName[106:115],
	_ReactionTypeName[115:125],
	_ReactionTypeName[125:138],
	_ReactionTypeName[138:146],
	_ReactionTypeName[146:159],
	_ReactionTypeName[159:173],
	_ReactionTypeName[173:190],
	_ReactionTypeName[190:202],
	_ReactionTypeName[202:211],
	_ReactionTypeName[211:221],
	_ReactionTypeName[221:236],
	_ReactionTypeName[236:252],
	_ReactionTypeName[252:271],
	_ReactionTypeName[271:285],
	_ReactionTypeName[285:297],
	_ReactionTypeName[297:307],
	_ReactionTypeName[307:315],
	_ReactionTypeName[315:331],
	_ReactionTypeName[331:344],
	_ReactionTypeName[344:364],
	_ReactionTypeName[364:388],
}

// ReactionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ReactionTypeString(s string) (ReactionType, error) {
	if val, ok := _ReactionTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ReactionTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ReactionType values", s)
}

// ReactionTypeValues returns all values of the enum
func ReactionTypeValues() []ReactionType {
	return _ReactionTypeValues
}

// ReactionTypeStrings returns a slice of all String values of the enum
func ReactionTypeStrings() []string {
	strs := make([]string, len(_ReactionTypeNames))
	copy(strs, _ReactionTypeNames)
	return strs
}

// IsAReactionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ReactionType) IsAReactionType() bool {
	for _, v := range _ReactionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ReactionType
func (i ReactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ReactionType
func (i *ReactionType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ReactionType should be a string, got %s", data)
	}

	var err error
	*i, err = ReactionTypeString(s)
	return err
}
